package calculate

import "testing"

func TestConverter(t *testing.T) {
	cases := []struct {
		in   float64
		uin  string
		uout string
		want string
	}{
		{100, "f", "c", "37.8"},
		{35, "c", "f", "95"},
		{35, "c", "c", "35"},
		{35, "z", "c", "common_si could not find unit 'z'"},
		{35, "c", "z", "si_common could not find unit 'z'"},
	}
	for _, c := range cases {
		got := Converter(c.in, c.uin, c.uout)
		if got != c.want {
			t.Errorf("Converter(%q, %q, %q) == %q, want %q", c.in, c.uin, c.uout, got, c.want)
		}
	}
}

func TestRound(t *testing.T) {
	cases := []struct {
		in   float64
		want string
	}{
		{100.111111, "100.1"},
		{35.55555, "35.6"},
	}
	for _, c := range cases {
		got := Round(c.in)
		if got != c.want {
			t.Errorf("Round(%q) == %q, want %q", c.in, got, c.want)
		}
	}
}

func TestSi_common(t *testing.T) {
	cases := []struct {
		in   float64
		out  string
		want float64
	}{
		{1, "bbl", 6.2898105697751},
		{2.2, "bbl", 13.83758325350522},
		{2, "ct", 10},
		{300, "c", 26.850000000000023},
		{0, "c", -273.15},
		{-44, "c", -317.15},
		{310.9277777777778, "f", 100.00000000000006},
		{0, "f", -459.67},
		{10.5, "cm", 1050},
		{100, "cm", 10000},
		{1, "ft", 3.280839895013123},
		{11.1, "ft", 36.41732283464567},
		{4.546074464699732, "guk", 1000},
		{5.051143337727871, "guk", 1111.1},
		{3.7854411931710636, "gus", 1000},
		{4.206003709732369, "gus", 1111.1},
		{746, "hp", 1},
		{1000.1, "hp", 1.3406166219839142},
		{1, "in", 39.37007874015748},
		{100.5, "in", 3956.692913385827},
		{1.1, "km", 0.0011},
		{1001, "km", 1.001},
		{10, "kmh", 35.99999999999971},
		{10, "kn", 19.438461717893492},
		{0.001, "l", 1},
		{0.0005, "l", 0.5},
		{1, "m", 1},
		{1.1, "m", 1.1},
		{1, "mi", 0.0006213711922373339},
		{1.1, "mi", 0.0006835083114610674},
		{10, "mph", 22.369362920544024},
		{1, "mps", 1},
		{1.1, "nm", 0.0005939524838012959},
		{500, "oz", 17.63698099034336},
		{222.222, "oz", 7.838650379272165},
		{1, "lb", 0.002204622621848776},
		{500, "lb", 1.1023113109243878},
		{1, "st", 0.00015747304441776972},
		{11111, "st", 1.7496829965258391},
		{1.1, "w", 1.1},
		{11.1, "yd", 12.139107611548557},
	}
	for _, c := range cases {
		got, _ := si_common(c.in, c.out)
		if got != c.want {
			t.Errorf("si_common(%q, %q) == %q, want %q", c.in, c.out, got, c.want)
		}
	}
}

func TestCommon_si(t *testing.T) {
	cases := []struct {
		in   float64
		out  string
		want float64
	}{
		{1, "bbl", 0.158987294928},
		{55.5, "bbl", 8.823794868504},
		{10, "ct", 2},
		{35, "c", 308.15},
		{0, "c", 273.15},
		{100, "f", 310.9277777777778},
		{0, "f", 255.3722222222222},
		{1, "cm", 0.01},
		{10.5, "cm", 0.105},

		{1, "ft", 0.3048},
		{11.1, "ft", 3.38328},
		{219.97, "guk", 1},
		{241.967, "guk", 1.1},
		{264.17, "gus", 1},
		{290.58700000000005, "gus", 1.1},
		{1, "hp", 746},
		{1000.1, "hp", 746074.6},
		{1, "in", 0.0254},
		{100.5, "in", 2.5526999999999997},
		{1.1, "km", 1100},
		{5.5, "km", 5500},
		{100, "kmh", 27.777777777778002},
		{100, "kn", 51.4444},
		{1, "l", 0.001},
		{1000, "l", 1},
		{1, "m", 1},
		{1.1, "m", 1.1},
		{1, "mi", 1609.344},
		{1.1, "mi", 1770.2784000000001},
		{100, "mph", 44.704},
		{1, "mps", 1},
		{1.1, "nm", 2037.2000000000003},
		{1, "oz", 28.3495231},
		{5.5, "oz", 155.92237705},
		{1, "lb", 453.59237},
		{1, "st", 6350.29318},
		{1.1, "w", 1.1},
		{11.1, "yd", 10.14984},
	}
	for _, c := range cases {
		got, _ := common_si(c.in, c.out)
		if got != c.want {
			t.Errorf("common_si(%q, %q) == %q, want %q", c.in, c.out, got, c.want)
		}
	}
}
